.\" Man page generated from reStructuredText.
.
.TH "FDASRSF" "1" "October 25, 2013" "1.1" "fdasrsf"
.SH NAME
fdasrsf \- fdasrsf Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
A python package for functional data analysis using the square root slope framework which performs pair\-wise and
group\-wise alignment as well as modeling using functional component analysis.
.SH FUNCTIONAL ALIGNMENT
.sp
Group\-wise function alignment using SRSF framework and Dynamic Programming
.sp
moduleauthor:: Derek Tucker <\fI\%dtucker@stat.fsu.edu\fP>
.INDENT 0.0
.TP
.B time_warping.align_fPCA(f, time, num_comp=3, showplot=True, smoothdata=False)
aligns a collection of functions while extracting principal components. The functions are aligned to the principal
components
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size N describing the sample points
.IP \(bu 2
\fBnum_comp\fP \-\- number of fPCA components
.IP \(bu 2
\fBshowplot\fP \-\- Shows plots of results using matplotlib (default = T)
.IP \(bu 2
\fBsmooth_data\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBsparam\fP (\fIdouble\fP) \-\- Number of times to run box filter (default = 25)
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return qn
aligned srvfs \- similar structure to fn
.TP
.B Return q0
original srvf \- similar structure to fn
.TP
.B Return mqn
srvf mean or median \- vector of length N
.TP
.B Return gam
warping functions \- similar structure to fn
.TP
.B Return q_pca
srsf principal directions
.TP
.B Return f_pca
functional principal directions
.TP
.B Return latent
latent values
.TP
.B Return coef
coefficients
.TP
.B Return U
eigenvectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.align_fPLS(f, g, time, comps=3, showplot=True, smoothdata=False, delta=0.01, max_itr=100)
This function aligns a collection of functions while performing principal least squares
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBg\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size N describing the sample points
.IP \(bu 2
\fBcomps\fP \-\- number of fPLS components
.IP \(bu 2
\fBshowplot\fP \-\- Shows plots of results using matplotlib (default = T)
.IP \(bu 2
\fBsmooth_data\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBdelta\fP \-\- gradient step size
.IP \(bu 2
\fBmax_itr\fP \-\- maximum number of iterations
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return gn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return qfn
aligned srvfs \- similar structure to fn
.TP
.B Return qgn
aligned srvfs \- similar structure to fn
.TP
.B Return qf0
original srvf \- similar structure to fn
.TP
.B Return qg0
original srvf \- similar structure to fn
.TP
.B Return gam
warping functions \- similar structure to fn
.TP
.B Return wqf
srsf principal weight functions
.TP
.B Return wqg
srsf principal weight functions
.TP
.B Return wf
srsf principal weight functions
.TP
.B Return wg
srsf principal weight functions
.TP
.B Return cost
cost function value
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.srsf_align(f, time, method=\(aqmean\(aq, showplot=True, smoothdata=False, lam=0.0)
This function aligns a collection of functions using the elastic square\-root slope (srsf) framework.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size N describing the sample points
.IP \(bu 2
\fBmethod\fP \-\- (string) warp calculate Karcher Mean or Median (options = "mean" or "median") (default="mean")
.IP \(bu 2
\fBshowplot\fP \-\- Shows plots of results using matplotlib (default = T)
.IP \(bu 2
\fBsmoothdata\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBlam\fP (\fIdouble\fP) \-\- controls the elasticity (default = 0)
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return qn
aligned srvfs \- similar structure to fn
.TP
.B Return q0
original srvf \- similar structure to fn
.TP
.B Return fmean
function mean or median \- vector of length N
.TP
.B Return mqn
srvf mean or median \- vector of length N
.TP
.B Return gam
warping functions \- similar structure to fn
.TP
.B Return orig_var
Original Variance of Functions
.TP
.B Return amp_var
Amplitude Variance
.TP
.B Return phase_var
Phase Variance
.UNINDENT
.sp
Examples
>>> import tables
>>> fun=tables.open_file("../Data/simu_data.h5")
>>> f = fun.root.f[:]
>>> f = f.transpose()
>>> time = fun.root.time[:]
>>> out = srsf_align(f,time)
.UNINDENT
.INDENT 0.0
.TP
.B time_warping.srsf_align_pair(f, g, time, method=\(aqmean\(aq, showplot=True, smoothdata=False, lam=0.0)
This function aligns a collection of functions using the elastic square\-root slope (srsf) framework.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBg\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size N describing the sample points
.IP \(bu 2
\fBmethod\fP \-\- (string) warp calculate Karcher Mean or Median (options = "mean" or "median") (default="mean")
.IP \(bu 2
\fBshowplot\fP \-\- Shows plots of results using matplotlib (default = T)
.IP \(bu 2
\fBsmoothdata\fP (\fI\%bool\fP) \-\- Smooth the data using a box filter (default = F)
.IP \(bu 2
\fBlam\fP (\fIdouble\fP) \-\- controls the elasticity (default = 0)
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return gn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return qfn
aligned srvfs \- similar structure to fn
.TP
.B Return qgn
aligned srvfs \- similar structure to fn
.TP
.B Return qf0
original srvf \- similar structure to fn
.TP
.B Return qg0
original srvf \- similar structure to fn
.TP
.B Return fmean
f function mean or median \- vector of length N
.TP
.B Return gmean
g function mean or median \- vector of length N
.TP
.B Return mqfn
srvf mean or median \- vector of length N
.TP
.B Return mqgn
srvf mean or median \- vector of length N
.TP
.B Return gam
warping functions \- similar structure to fn
.UNINDENT
.UNINDENT
.SH FUNCTIONAL PRINCIPAL COMPONENT ANALYSIS
.sp
Vertical and Horizontal Functional Principal Component Analysis using SRSF
.sp
moduleauthor:: Derek Tucker <\fI\%dtucker@stat.fsu.edu\fP>
.INDENT 0.0
.TP
.B fPCA.horizfPCA(gam, time, no, showplot=True)
This function calculates horizontal functional principal component analysis on aligned data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgam\fP \-\- numpy ndarray of shape (M,N) of M warping functions
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBno\fP (\fI\%int\fP) \-\- number of components to extract (default = 1)
.IP \(bu 2
\fBshowplot\fP (\fI\%bool\fP) \-\- Shows plots of results using matplotlib (default = T)
.UNINDENT
.TP
.B Return type
tuple of numpy ndarray
.TP
.B Return q_pca
srsf principal directions
.TP
.B Return f_pca
functional principal directions
.TP
.B Return latent
latent values
.TP
.B Return coef
coefficients
.TP
.B Return U
eigenvectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B fPCA.vertfPCA(fn, time, qn, no=1, showplot=True)
This function calculates vertical functional principal component analysis on aligned data
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfn\fP \-\- numpy ndarray of shape (M,N) of M aligned functions with N samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBqn\fP \-\- numpy ndarray of shape (M,N) of M aligned SRSF with N samples
.IP \(bu 2
\fBno\fP (\fI\%int\fP) \-\- number of components to extract (default = 1)
.IP \(bu 2
\fBshowplot\fP (\fI\%bool\fP) \-\- Shows plots of results using matplotlib (default = T)
.UNINDENT
.TP
.B Return type
tuple of numpy ndarray
.TP
.B Return q_pca
srsf principal directions
.TP
.B Return f_pca
functional principal directions
.TP
.B Return latent
latent values
.TP
.B Return coef
coefficients
.TP
.B Return U
eigenvectors
.UNINDENT
.UNINDENT
.SH GAUSSIAN GENERATIVE MODELS
.sp
Gaussian Model of functional data
.sp
moduleauthor:: Derek Tucker <\fI\%dtucker@stat.fsu.edu\fP>
.INDENT 0.0
.TP
.B gauss_model.gauss_model(fn, time, qn, gam, n=1, sort_samples=False)
This function models the functional data using a Gaussian model extracted from the principal components of the srvfs
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfn\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M aligned functions with N samples
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size N describing the sample points
.IP \(bu 2
\fBqn\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M aligned srvfs with N samples
.IP \(bu 2
\fBgam\fP (\fInp.ndarray\fP) \-\- warping functions
.IP \(bu 2
\fBn\fP (\fIinteger\fP) \-\- number of random samples
.IP \(bu 2
\fBsort_samples\fP (\fI\%bool\fP) \-\- sort samples (default = T)
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return fs
random aligned samples
.TP
.B Return gams
random warping functions
.TP
.B Return ft
random samples
.UNINDENT
.UNINDENT
.SH FUNCTIONAL PRINCIPAL LEAST SQUARES
.sp
Partial Least Squares using SVD
.sp
moduleauthor:: Derek Tucker <\fI\%dtucker@stat.fsu.edu\fP>
.INDENT 0.0
.TP
.B fPLS.pls_svd(time, qf, qg, no, alpha=0.0)
This function computes the partial least squares using SVD
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtime\fP \-\- vector describing time samples
.IP \(bu 2
\fBqf\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBqg\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBno\fP \-\- number of components
.IP \(bu 2
\fBalpha\fP \-\- amount of smoothing (Default = 0.0 i.e., none)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return wqf
f weight function
.TP
.B Return wqg
g weight function
.TP
.B Return alpha
smoothing value
.TP
.B Return values
singular values
.UNINDENT
.UNINDENT
.SH ELASTIC REGRESSION
.sp
Warping Invariant Regression using SRSF
.sp
moduleauthor:: Derek Tucker <\fI\%dtucker@stat.fsu.edu\fP>
.INDENT 0.0
.TP
.B regression.elastic_prediction(f, time, model, y=None)
This function identifies a regression model with phase\-variablity using elastic methods
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBmodel\fP \-\- indentified model from elastic_regression
.IP \(bu 2
\fBy\fP \-\- truth, optional used to calculate SSE
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return alpha
alpha parameter of model
.TP
.B Return beta
beta(t) of model
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return qn
aligned srvfs \- similar structure to fn
.TP
.B Return gamma
calculated warping functions
.TP
.B Return q
original training SRSFs
.TP
.B Return B
basis matrix
.TP
.B Return b
basis coefficients
.TP
.B Return SSE
sum of squared error
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B regression.elastic_regression(f, y, time, B=None)
This function identifies a regression model with phase\-variablity using elastic methods
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP (\fInp.ndarray\fP) \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBy\fP \-\- numpy array of N responses
.IP \(bu 2
\fBtime\fP (\fInp.ndarray\fP) \-\- vector of size N describing the sample points
.IP \(bu 2
\fBB\fP \-\- optional matrix describing Basis elements
.UNINDENT
.TP
.B Return type
tuple of numpy array
.TP
.B Return alpha
alpha parameter of model
.TP
.B Return beta
beta(t) of model
.TP
.B Return fn
aligned functions \- numpy ndarray of shape (M,N) of M functions with N samples
.TP
.B Return qn
aligned srvfs \- similar structure to fn
.TP
.B Return gamma
calculated warping functions
.TP
.B Return q
original training SRSFs
.TP
.B Return B
basis matrix
.TP
.B Return b
basis coefficients
.TP
.B Return SSE
sum of squared error
.UNINDENT
.UNINDENT
.SH UTILITY FUNCTIONS
.sp
Utility functions for SRSF Manipulations
.sp
moduleauthor:: Derek Tucker <\fI\%dtucker@stat.fsu.edu\fP>
.INDENT 0.0
.TP
.B utility_functions.SqrtMean(gam)
calculates the srsf of warping functions with corresponding shooting vectors
.INDENT 7.0
.TP
.B Parameters
\fBgam\fP \-\- numpy ndarray of shape (M,N) of M warping functions with N samples
.TP
.B Return type
2 numpy ndarray and vector
.TP
.B Return mu
Karcher mean psi function
.TP
.B Return gam_mu
vector of dim N which is the Karcher mean warping function
.TP
.B Return psi
numpy ndarray of shape (M,N) of M SRSF of the warping functions
.TP
.B Return vec
numpy ndarray of shape (M,N) of M shooting vectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.SqrtMeanInverse(gam)
finds the inverse of the mean of the set of the diffeomorphisms gamma
.INDENT 7.0
.TP
.B Parameters
\fBgam\fP \-\- numpy ndarray of shape (M,N) of M warping functions with N samples
.TP
.B Return type
vector
.TP
.B Return gamI
inverse of gam
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.cumtrapzmid(x, y, c)
cumulative trapezoidal numerical integration taken from midpoint
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBx\fP \-\- vector of size N describing the time samples
.IP \(bu 2
\fBy\fP \-\- vector of size N describing the function
.IP \(bu 2
\fBc\fP \-\- midpoint
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return fa
cumulative integration
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.diffop(n, binsize=1)
Creates a second order differential operator
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBn\fP \-\- dimension
.IP \(bu 2
\fBbinsize\fP \-\- dx (default = 1)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return m
matrix describing differential operator
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.elastic_distance(f1, f2, time, lam=0.0)
"
calculates the distances between function, where f1 is aligned to f2. In other words
calculates the elastic distances
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf1\fP \-\- vector of size N
.IP \(bu 2
\fBf2\fP \-\- vector of size N
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBlam\fP \-\- controls the elasticity (default = 0.0)
.UNINDENT
.TP
.B Return type
scalar
.TP
.B Return Dy
amplitude distance
.TP
.B Return Dx
phase distance
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.f_K_fold(Nobs, K=5)
generates sample indices for K\-fold cross validation
.sp
:param Nobs number of observations
:param K number of folds
.INDENT 7.0
.TP
.B Return type
numpy ndarray
.TP
.B Return train
train indexes (Nobs*(K\-1)/K X K)
.TP
.B Return test
test indexes (Nobs*(1/K) X K)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.f_to_srsf(f, time)
converts f to a square\-root slope function (SRSF)
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- vector of size N samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return q
srsf of f
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.geigen(Amat, Bmat, Cmat)
generalized eigenvalue problem of the form
.sp
max tr L\(aqAM / sqrt(tr L\(aqBL tr M\(aqCM) w.r.t. L and M
.sp
:param Amat numpy ndarray of shape (M,N)
:param Bmat numpy ndarray of shape (M,N)
:param Bmat numpy ndarray of shape (M,N)
.INDENT 7.0
.TP
.B Return type
numpy ndarray
.TP
.B Return values
eigenvalues
.TP
.B Return Lmat
left eigenvectors
.TP
.B Return Mmat
right eigenvectors
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.gradient_spline(time, f, smooth=False)
This function takes the gradient of f using b\-spline smoothing
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBsmooth\fP \-\- smooth data (default = F)
.UNINDENT
.TP
.B Return type
tuple of numpy ndarray
.TP
.B Return f0
smoothed functions functions
.TP
.B Return g
first derivative of each function
.TP
.B Return g2
second derivative of each function
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.innerprod_q(time, q1, q2)
calculates the innerproduct between two srsfs
.sp
:param time vector descrbing time samples
:param q1 vector of srsf 1
:param q2 vector of srsf 2
.INDENT 7.0
.TP
.B Return type
scalar
.TP
.B Return val
inner product value
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.invertGamma(gam)
finds the inverse of the diffeomorphism gamma
.INDENT 7.0
.TP
.B Parameters
\fBgam\fP \-\- vector describing the warping function
.TP
.B Return type
vector
.TP
.B Return gamI
inverse of gam
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.optimum_reparam(q1, time, q2, lam=0.0)
calculates the warping to align srsf q2 to q1
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq1\fP \-\- vector of size N or array of NxM samples of first SRSF
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBq2\fP \-\- vector of size N or array of NxM samples samples of second SRSF
.IP \(bu 2
\fBlam\fP \-\- controls the amount of elasticity (default = 0.0)
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return gam
describing the warping function used to align q2 with q1
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.optimum_reparam_pair(q, time, q1, q2, lam=0.0)
calculates the warping to align srsf pair q1 and q2 to q
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq\fP \-\- vector of size N or array of NxM samples of first SRSF
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBq1\fP \-\- vector of size N or array of NxM samples samples of second SRSF
.IP \(bu 2
\fBq2\fP \-\- vector of size N or array of NxM samples samples of second SRSF
.IP \(bu 2
\fBlam\fP \-\- controls the amount of elasticity (default = 0.0)
.UNINDENT
.TP
.B Return type
vector
.TP
.B Return gam
describing the warping function used to align q2 with q1
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.outlier_detection(q, time, mq, k=1.5)
calculates outlier\(aqs using geodesic distances of the SRSFs from the median
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBq\fP \-\- numpy ndarray of N x M of M SRS functions with N samples
.IP \(bu 2
\fBtime\fP \-\- vector of size N describing the sample points
.IP \(bu 2
\fBmq\fP \-\- median calculated using \fBtime_warping.srsf_align()\fP
.IP \(bu 2
\fBk\fP \-\- cutoff threshold (default = 1.5)
.UNINDENT
.TP
.B Returns
q_outlier: outlier functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.randomGamma(gam, num)
generates random warping functions
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBgam\fP \-\- numpy ndarray of N x M of M of warping functions
.IP \(bu 2
\fBnum\fP \-\- number of random functions
.UNINDENT
.TP
.B Returns
rgam: random warping functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.rgam(N, sigma, num)
Generates random warping functions
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBN\fP \-\- length of warping function
.IP \(bu 2
\fBsigma\fP \-\- variance of warping functions
.IP \(bu 2
\fBnum\fP \-\- number of warping functions
.UNINDENT
.TP
.B Returns
gam: numpy ndarray of warping functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.smooth_data(f, sparam)
This function smooths a collection of functions using a box filter
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBf\fP \-\- numpy ndarray of shape (M,N) of M functions with N samples
.IP \(bu 2
\fBsparam\fP \-\- Number of times to run box filter (default = 25)
.UNINDENT
.TP
.B Return type
numpy ndarray
.TP
.B Return f
smoothed functions functions
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.update_progress(progress)
This function creates a progress bar
.INDENT 7.0
.TP
.B Parameters
\fBprogress\fP \-\- fraction of progress
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.warp_q_gamma(time, q, gam)
warps a srsf q by gam
.sp
:param time vector describing time samples
:param q vector describing srsf
:param gam vector describing warping function
.INDENT 7.0
.TP
.B Return type
numpy ndarray
.TP
.B Return q_temp
warped srsf
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B utility_functions.zero_crossing(Y, q, bt, time, y_max, y_min, gmax, gmin)
finds zero\-crossing of optimal gamma, gam = s*gmax + (1\-s)*gmin from elastic regression model
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBY\fP \-\- response
.IP \(bu 2
\fBq\fP \-\- predicitve function
.IP \(bu 2
\fBbt\fP \-\- basis function
.IP \(bu 2
\fBtime\fP \-\- time samples
.IP \(bu 2
\fBy_max\fP \-\- maximum repsonse for warping function gmax
.IP \(bu 2
\fBy_min\fP \-\- minimum response for warping function gmin
.IP \(bu 2
\fBgmax\fP \-\- max warping function
.IP \(bu 2
\fBgmin\fP \-\- min warping fucntion
.UNINDENT
.TP
.B Return type
numpy array
.TP
.B Return gamma
optimal warping function
.UNINDENT
.UNINDENT
.sp
References:
.INDENT 0.0
.INDENT 3.5
Srivastava, A., Wu, W., Kurtek, S., Klassen, E., Marron, J. S., May 2011. Registration of functional data using
fisher\-rao metric, arXiv:1103.3817v2 [math.ST].
.sp
Tucker, J. D., Wu, W., Srivastava, A., Generative Models for Function Data using Phase and Amplitude Separation,
Computational Statistics and Data Analysis (2012), 10.1016/j.csda.2012.12.001.
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
J. Derek Tucker
.SH COPYRIGHT
2013, J. Derek Tucker
.\" Generated by docutils manpage writer.
.
